name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Lint with flake8 (non-blocking)
      run: |
        echo "üîç Running flake8 checks..."
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics || true
        echo "‚ÑπÔ∏è Lint check completed (non-blocking)"
    
    - name: Check formatting with black (non-blocking)  
      run: |
        echo "üé® Checking code formatting..."
        black --check --diff . || echo "‚ö†Ô∏è Code formatting issues found, but not blocking"
        
  commit-message-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check commit messages
      run: |
        echo "üîç Checking commit messages for Conventional Commits format..."
        
        # Get commit messages in the PR
        COMMITS=$(git log --format="%H %s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        # Pattern for Conventional Commits
        PATTERN="^(feat|fix|docs|style|refactor|test|chore|build|ci|perf|revert)(\(.+\))?: .+"
        
        INVALID_COUNT=0
        
        while IFS= read -r line; do
          if [ -n "$line" ]; then
            COMMIT_HASH=$(echo "$line" | cut -d' ' -f1)
            COMMIT_MSG=$(echo "$line" | cut -d' ' -f2-)
            
            if echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
              echo "‚úÖ Valid: $COMMIT_MSG"
            else
              echo "‚ùå Invalid: $COMMIT_MSG"
              echo "   Commit: $COMMIT_HASH"
              INVALID_COUNT=$((INVALID_COUNT + 1))
            fi
          fi
        done <<< "$COMMITS"
        
        if [ $INVALID_COUNT -gt 0 ]; then
          echo ""
          echo "üö® Found $INVALID_COUNT invalid commit message(s)!"
          echo ""
          echo "üìã Conventional Commits ÌòïÏãùÏùÑ Îî∞ÎùºÏ£ºÏÑ∏Ïöî:"
          echo "   type(scope): description"
          echo ""
          echo "   Types: feat, fix, docs, style, refactor, test, chore"
          echo "   Examples:"
          echo "   - feat(auth): ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Í∏∞Îä• Ï∂îÍ∞Ä"
          echo "   - fix(api): ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÎàÑÎùΩ Î¨∏Ï†ú ÏàòÏ†ï"
          echo "   - docs: README.md ÏóÖÎç∞Ïù¥Ìä∏"
          exit 1
        else
          echo ""
          echo "üéâ All commit messages are valid!"
        fi